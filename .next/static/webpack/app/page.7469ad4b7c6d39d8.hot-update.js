"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/stockfish-utils.ts":
/*!********************************!*\
  !*** ./lib/stockfish-utils.ts ***!
  \********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StockfishEngine: () => (/* binding */ StockfishEngine),\n/* harmony export */   destroyStockfishEngine: () => (/* binding */ destroyStockfishEngine),\n/* harmony export */   getStockfishEngine: () => (/* binding */ getStockfishEngine)\n/* harmony export */ });\n/* __next_internal_client_entry_do_not_use__ StockfishEngine,getStockfishEngine,destroyStockfishEngine auto */ class StockfishEngine {\n    async initialize() {\n        return new Promise((resolve, reject)=>{\n            try {\n                console.log('[Stockfish] Creating worker...');\n                this.initResolve = resolve;\n                // Use the stockfish.worker.js file\n                this.worker = new Worker('/stockfish.worker.js');\n                // Set a timeout for initialization\n                const timeout = setTimeout(()=>{\n                    console.error('[Stockfish] Initialization timeout!');\n                    reject(new Error('Stockfish initialization timeout'));\n                }, 20000) // 20 second timeout for WASM loading\n                ;\n                this.worker.onmessage = (event)=>{\n                    const message = event.data;\n                    console.log('[Stockfish] Received:', message);\n                    // Handle string messages from Stockfish\n                    if (typeof message === 'string') {\n                        if (message.includes('uciok')) {\n                            console.log('[Stockfish] UCI OK received, configuring engine...');\n                            clearTimeout(timeout);\n                            this.isReady = true;\n                            // Configure engine\n                            this.sendCommand('setoption name Threads value 1');\n                            this.sendCommand('setoption name Hash value 16');\n                            this.sendCommand('setoption name Ponder value false');\n                            this.sendCommand('isready');\n                            // Process queued commands\n                            while(this.messageQueue.length > 0){\n                                const cmd = this.messageQueue.shift();\n                                this.sendCommand(cmd);\n                            }\n                        } else if (message === 'readyok') {\n                            console.log('[Stockfish] Engine ready!');\n                            if (this.initResolve) {\n                                this.initResolve();\n                                this.initResolve = null;\n                            }\n                        } else if (message.startsWith('bestmove')) {\n                            this.handleBestMove(message);\n                        } else if (message.startsWith('info')) {\n                            this.handleInfo(message);\n                        }\n                    } else if (typeof message === 'object' && message.cmd === 'alert') {\n                        // Handle alert messages from worker\n                        console.log('[Stockfish Alert]', message.text);\n                    }\n                };\n                this.worker.onerror = (error)=>{\n                    clearTimeout(timeout);\n                    console.error('[Stockfish] Worker error:', error);\n                    reject(error);\n                };\n                // Start the engine with stockfish.js\n                console.log('[Stockfish] Loading stockfish.js...');\n                this.worker.postMessage({\n                    cmd: 'load',\n                    urlOrBlob: '/stockfish.js',\n                    wasmBinary: '/stockfish.wasm'\n                });\n            } catch (error) {\n                console.error('[Stockfish] Failed to initialize:', error);\n                reject(error);\n            }\n        });\n    }\n    sendCommand(command) {\n        if (this.worker) {\n            if (this.isReady || command === 'uci') {\n                console.log('[Stockfish] Sending command:', command);\n                this.worker.postMessage(command);\n            } else {\n                console.log('[Stockfish] Queuing command:', command);\n                this.messageQueue.push(command);\n            }\n        } else {\n            console.error('[Stockfish] No worker available!');\n        }\n    }\n    async analyzePosition(fen) {\n        let depth = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 12, callback = arguments.length > 2 ? arguments[2] : void 0;\n        return new Promise((resolve)=>{\n            console.log('[Stockfish] Analyzing position:', fen);\n            if (!this.isReady) {\n                console.warn('[Stockfish] Engine not ready, returning empty analysis');\n                resolve({\n                    evaluation: 0,\n                    depth: 0,\n                    bestMove: '',\n                    pv: [],\n                    nodes: 0\n                });\n                return;\n            }\n            this.currentAnalysis = {\n                evaluation: 0,\n                depth: 0,\n                bestMove: '',\n                pv: [],\n                nodes: 0\n            };\n            if (callback) {\n                this.analysisCallbacks.push(callback);\n            }\n            // Clear previous analysis\n            this.sendCommand('stop');\n            // Small delay to ensure stop is processed\n            setTimeout(()=>{\n                // Set position\n                this.sendCommand(\"position fen \".concat(fen));\n                // Start analysis with movetime for faster response\n                this.sendCommand(\"go movetime 3000\") // 3 seconds analysis\n                ;\n            }, 50);\n            // Timeout to ensure we get a result\n            const timeout = setTimeout(()=>{\n                console.log('[Stockfish] Analysis timeout, returning current analysis');\n                this.sendCommand('stop');\n                if (callback) {\n                    this.analysisCallbacks = this.analysisCallbacks.filter((cb)=>cb !== callback);\n                }\n                resolve(this.currentAnalysis || {\n                    evaluation: 0,\n                    depth: 0,\n                    bestMove: '',\n                    pv: [],\n                    nodes: 0\n                });\n            }, 4000) // 4 second timeout\n            ;\n            // Store timeout for cleanup\n            const originalCallbacksLength = this.analysisCallbacks.length;\n            this.analysisCallbacks.push(()=>{\n                clearTimeout(timeout);\n                if (callback) {\n                    this.analysisCallbacks = this.analysisCallbacks.filter((cb)=>cb !== callback);\n                }\n                resolve(this.currentAnalysis);\n            });\n        });\n    }\n    stopAnalysis() {\n        console.log('[Stockfish] Stopping analysis');\n        this.sendCommand('stop');\n        this.analysisCallbacks = [];\n    }\n    handleBestMove(message) {\n        console.log('[Stockfish] Best move:', message);\n        const parts = message.split(' ');\n        const bestMove = parts[1];\n        if (this.currentAnalysis && bestMove && bestMove !== '(none)') {\n            this.currentAnalysis.bestMove = bestMove;\n            // Notify all callbacks that analysis is complete\n            const callbacks = [\n                ...this.analysisCallbacks\n            ];\n            this.analysisCallbacks = [];\n            callbacks.forEach((callback)=>callback(this.currentAnalysis));\n        }\n    }\n    handleInfo(message) {\n        if (!this.currentAnalysis) return;\n        // Parse depth\n        const depthMatch = message.match(/depth (\\d+)/);\n        if (depthMatch) {\n            this.currentAnalysis.depth = parseInt(depthMatch[1]);\n            console.log('[Stockfish] Depth:', this.currentAnalysis.depth);\n        }\n        // Parse score\n        const scoreMatch = message.match(/score (cp|mate) (-?\\d+)/);\n        if (scoreMatch) {\n            if (scoreMatch[1] === 'cp') {\n                // Convert centipawns to pawns\n                this.currentAnalysis.evaluation = parseInt(scoreMatch[2]) / 100;\n                console.log('[Stockfish] Evaluation:', this.currentAnalysis.evaluation);\n            } else {\n                // Mate score\n                const mateIn = parseInt(scoreMatch[2]);\n                this.currentAnalysis.mate = mateIn;\n                this.currentAnalysis.evaluation = mateIn > 0 ? 100 : -100;\n                console.log('[Stockfish] Mate in', mateIn);\n            }\n        }\n        // Parse principal variation\n        const pvMatch = message.match(/pv (.+)/);\n        if (pvMatch) {\n            this.currentAnalysis.pv = pvMatch[1].trim().split(' ');\n            if (this.currentAnalysis.pv.length > 0 && !this.currentAnalysis.bestMove) {\n                this.currentAnalysis.bestMove = this.currentAnalysis.pv[0];\n            }\n            console.log('[Stockfish] PV:', this.currentAnalysis.pv.join(' '));\n        }\n        // Parse nodes\n        const nodesMatch = message.match(/nodes (\\d+)/);\n        if (nodesMatch) {\n            this.currentAnalysis.nodes = parseInt(nodesMatch[1]);\n        }\n        // Notify callbacks of progress\n        if (this.analysisCallbacks.length > 0 && this.currentAnalysis.depth > 0) {\n            // Only notify on significant depth updates\n            if (this.currentAnalysis.depth % 3 === 0 || this.currentAnalysis.depth >= 10) {\n                this.analysisCallbacks.forEach((callback)=>{\n                    if (typeof callback === 'function' && callback !== this.analysisCallbacks[this.analysisCallbacks.length - 1]) {\n                        callback(this.currentAnalysis);\n                    }\n                });\n            }\n        }\n    }\n    destroy() {\n        console.log('[Stockfish] Destroying engine');\n        this.stopAnalysis();\n        if (this.worker) {\n            this.worker.terminate();\n            this.worker = null;\n        }\n        this.isReady = false;\n        this.currentAnalysis = null;\n    }\n    isEngineReady() {\n        return this.isReady;\n    }\n    constructor(){\n        this.worker = null;\n        this.isReady = false;\n        this.currentAnalysis = null;\n        this.analysisCallbacks = [];\n        this.messageQueue = [];\n        this.initResolve = null;\n    }\n}\n// Singleton instance\nlet engineInstance = null;\nconst getStockfishEngine = async ()=>{\n    if (!engineInstance) {\n        engineInstance = new StockfishEngine();\n        await engineInstance.initialize();\n    }\n    return engineInstance;\n};\nconst destroyStockfishEngine = ()=>{\n    if (engineInstance) {\n        engineInstance.destroy();\n        engineInstance = null;\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/stockfish-utils.ts\n"));

/***/ })

});